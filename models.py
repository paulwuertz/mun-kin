##
# Code auto-generated by Visual Alchemist version 1.0.6
import sqlalchemy
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, Date, String, Text, Float, ForeignKey
from sqlalchemy.dialects.mysql import BIGINT
from sqlalchemy.dialects.mysql import LONGTEXT
from sqlalchemy.orm import sessionmaker, relationship, backref
from flask_admin.contrib.sqla import filters
from flask.ext.admin.form.upload import FileUploadField

Base = declarative_base()

class Kartaro(Base):
	__tablename__ = "Kartaro"
	nomo = Column(Text(255), unique=True)
	id = Column(Integer(), primary_key=True, unique=True, nullable=False,autoincrement=True)

	def __str__(self):
		return self.nomo


class Bildo(Base):
	__tablename__ = "Bildo"
	id = Column(Integer, primary_key=True)
	nomo = Column(String(128))
	loko = Column(String, unique=True)

	def __str__(self):
		return self.nomo

class Karto(Base):
	__tablename__ = "Karto"


	column_editable_list = ('supra', 'supra_sub', 'bildo', 'klarigo_eta_teksto', 'klarigo_ega_teksto', 'piedo_dekstra', 'piedo_maldekstra', 'kartaro_id')

	supra_top = Column(Text(255), nullable=False, default="")
	supra = Column(Text(255), nullable=False, default="")
	supra_sub = Column(Text(255), nullable=False, default="")
	klarigo_eta_teksto = Column(Text(255), nullable=False, default="")
	klarigo_ega_teksto = Column(Text(255), nullable=False, default="")
	id = Column(Integer, primary_key=True, unique=True, nullable=False)
	piedo_dekstra = Column(Text(255), nullable=False, default="")
	piedo_maldekstra = Column(Text(255), nullable=False, default="")

	kartaro_id = Column(Text(), ForeignKey(Kartaro.nomo))
	kartaro = relationship(Kartaro, backref='Karto')

	bildo_id = Column(Text(), ForeignKey(Bildo.nomo))
	bildo = relationship(Bildo, backref='Karto')

	def __str__(self):
		return self.supra

if __name__ == '__main__':
   print('running sqlalchemy ' + sqlalchemy.__version__)
   engine = create_engine(r'sqlite:///visualalchemist.db', echo=True) #connect to database
   Base.metadata.create_all(engine) #Lets create the actual sqlite database and schema!
   print('database created: visualalchemist.db')